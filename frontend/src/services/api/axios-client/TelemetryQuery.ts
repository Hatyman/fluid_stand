import * as Types from '../axios-client';

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import { useQuery, UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, useMutation, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { QueryMetaContext, QueryMetaContextValue } from 'react-query-swagger';
import { useContext } from 'react';
import { addMetaToOptions,  trimArrayEnd, isParameterObject, getBaseUrl } from './helpers';
export const Client = Types.TelemetryClient;

    
export function listUrl(): string {
  let url_ = getBaseUrl() + "/telemetry";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let listDefaultOptions: UseQueryOptions<Types.Telemetry[], unknown, Types.Telemetry[]> = {};
export function getListDefaultOptions(): UseQueryOptions<Types.Telemetry[], unknown, Types.Telemetry[]> {
  return listDefaultOptions;
};
export function setListDefaultOptions(options: UseQueryOptions<Types.Telemetry[], unknown, Types.Telemetry[]>) {
  listDefaultOptions = options;
}

export function listQueryKey(): QueryKey;
export function listQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'TelemetryClient',
      'list',
    ]);
}
function __list() {
  return Types.TelemetryClient.list(
    );
}

export function useListQuery<TSelectData = Types.Telemetry[], TError = unknown>(options?: UseQueryOptions<Types.Telemetry[], TError, TSelectData>): UseQueryResult<TSelectData, TError>;
export function useListQuery<TSelectData = Types.Telemetry[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Telemetry[], TError, TSelectData> | undefined = undefined;
  

  options = params[0] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Telemetry[], TError, TSelectData>({
    queryFn: __list,
    queryKey: listQueryKey(),
    ...listDefaultOptions as unknown as UseQueryOptions<Types.Telemetry[], TError, TSelectData>,
    ...options,
  });
}

export function setListData(queryClient: QueryClient, updater: (data: Types.Telemetry[] | undefined) => Types.Telemetry[], ) {
  queryClient.setQueryData(listQueryKey(),
    updater
  );
}

export function setListDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Telemetry[] | undefined) => Types.Telemetry[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
